/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ufidelitas.pantallas;

import com.ufidelitas.modelo.Producto;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author isaac
 */
public class jFrmPedido extends javax.swing.JFrame {

    /**
     * Creates new form jFrmPedido
     */
    public jFrmPedido() {
        initComponents();
        jBtnFinalizar.setVisible(false);
        cargarDetallesPedido();
        startProgressBar();
    }

    private static List<Producto> carrito = new ArrayList<>();

    public static List<Producto> getCarrito() {
        return carrito;
    }

    public static void setCarrito(List<Producto> carrito) {
        jFrmPedido.carrito = carrito;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jBtnFinalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Progreso del envio...");

        jBtnFinalizar.setText("Finalizar");
        jBtnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFinalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFinalizarActionPerformed
      JfrmIniciarSesión frmIniciarSesión  = new JfrmIniciarSesión();
      frmIniciarSesión.setVisible(true);
      frmIniciarSesión.setLocationRelativeTo(null);
      this.dispose();
    }//GEN-LAST:event_jBtnFinalizarActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnFinalizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void cargarDetallesPedido() {
        String hilera = "*** Detalles del pedido ***\n";
        int total = 0;

        for (Producto producto : carrito) {
            hilera += producto.getNombre() + "\n"
                    + producto.getDescripcion()
                    + "\n Precio del producto: ₡" + producto.getPrecio()
                    + "\n Cantidad del pedido: " + producto.getCantidadAcomprar()
                    + "\n Subtotal: ₡" + producto.getSubTotal()
                    + "\n---------------------------\n\n";
            total += producto.getSubTotal();
        }

        hilera += "\n\n*** Total del pedido ***  " + "₡" + total;
        jTextArea1.setText(hilera);
    }

    private void startProgressBar() {
        // Crear un hilo para realizar la carga en segundo plano
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                // Simular la carga (puedes reemplazar esto con tu lógica de carga real)
                for (int i = 0; i <= 100; i++) {
                    final int progressValue = i;

                    // Actualizar la barra de progreso en el hilo de despacho de eventos de Swing
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            jProgressBar1.setValue(progressValue);
                        }
                    });

                    try {
                        // Simular una pausa para mostrar el progreso
                        Thread.sleep(50);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                
                jLabel1.setText("Envío recibido!");
                jBtnFinalizar.setVisible(true);
            }
        });

        // Iniciar el hilo
        thread.start();
    }
}
